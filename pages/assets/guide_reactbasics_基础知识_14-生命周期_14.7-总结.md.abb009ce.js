import{_ as o,o as e,c as t,S as c}from"./chunks/framework.739ae78b.js";const h=JSON.parse('{"title":"基础知识 - 生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"guide/reactbasics/基础知识/14-生命周期/14.7-总结.md","filePath":"guide/reactbasics/基础知识/14-生命周期/14.7-总结.md"}'),d={name:"guide/reactbasics/基础知识/14-生命周期/14.7-总结.md"},a=c('<h1 id="基础知识-生命周期" tabindex="-1">基础知识 - 生命周期 <a class="header-anchor" href="#基础知识-生命周期" aria-label="Permalink to &quot;基础知识 - 生命周期&quot;">​</a></h1><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><strong>1. 性能提升</strong></p><blockquote><p>两种方案 <code>shouldComponentUpdate</code> <code>PureComponent</code></p></blockquote><p><strong>2. 周期替代</strong></p><blockquote><ol><li><code>getDerivedStateFromProps</code> 跟 <code>componentDidUpdate</code> 配套使用 ，可以替代 <code>componentWillMount</code> <code>componentWillReceiveProps</code></li></ol></blockquote><blockquote><ol start="2"><li><code>getSnapshotBeforeUpdate</code> 可以替代 <code>componentWillUpdate</code></li></ol></blockquote><p><strong>3. 新老周期使用问题</strong></p><blockquote><p>用了<code>新生命周期</code>就不要在用<code>老生命周期</code>了,控制台会报错，所谓 &quot;一山不容二虎&quot;</p></blockquote><p><strong>4. 弃用周期</strong></p><blockquote><p><code>componentWillMount</code> <code>componentWillUpdata</code> <code>componentWillReceiveProps</code> 都即将被弃用 ，请选择<code>新生命周期</code>来替代，如果你想<code>无视警告</code>，请在生命周期前面拼上<code>UNSAFE_</code></p></blockquote>',11),n=[a];function l(r,s,p,i,_,u){return e(),t("div",null,n)}const b=o(d,[["render",l]]);export{h as __pageData,b as default};
