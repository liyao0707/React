import{_ as e,o as t,c as o,S as s}from"./chunks/framework.6bb1a485.js";const m=JSON.parse('{"title":"基础知识 - 属性与状态的区别","description":"","frontmatter":{},"headers":[],"relativePath":"guide/reactbasics/基础知识/10.1-属性与状态的区别.md","filePath":"guide/reactbasics/基础知识/10.1-属性与状态的区别.md"}'),a={name:"guide/reactbasics/基础知识/10.1-属性与状态的区别.md"},c=s('<h1 id="基础知识-属性与状态的区别" tabindex="-1">基础知识 - 属性与状态的区别 <a class="header-anchor" href="#基础知识-属性与状态的区别" aria-label="Permalink to &quot;基础知识 - 属性与状态的区别&quot;">​</a></h1><h3 id="属性vs状态" tabindex="-1">属性vs状态 <a class="header-anchor" href="#属性vs状态" aria-label="Permalink to &quot;属性vs状态&quot;">​</a></h3><ul><li><strong>相似点：</strong></li></ul><blockquote><p>都是纯js对象，都会触发render更新，都具有确定性(状态数据相同，结果相同)</p></blockquote><ul><li><strong>不同点：</strong></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>属性能从父组件获取 ，状态不能</li><li>属性可以由父组件修改，状态不能</li><li>属性能在内部设置默认值，状态也可以，设置方式不同</li><li>属性不在组件内部修改，状态需在组件内部修改</li><li>属性能设置组件初始值，状态不能</li><li>属性可以修改子组件的值，状态不能</li></ol></div><p><code>state</code> 的主要作用是用于组件内部的 保存、控制、修改自己可变状态。<code>state</code>在组件内部初始化,可以被组件自身修改，而外部不能访问且不可修改，你可以认为 <code>state</code>是一个局部的 只能被组件自身控制的数据源。<code>state</code>中 状态 可以通过 <code>this.setState</code> 方法进行更新，<code>setState</code> 会导致组件重新渲染</p><p><code>props</code> 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的参数，组件内部无法控制与修改,除非外部组件主动传入新的<code>props</code>,否则组件的<code>props</code>永远保持不变</p><p>没有state的组件叫 <code>无状态组件（stateless component）</code>设置了state的叫做 <code>有状态组件（stateful component）</code> 应为状态会带来管理的复杂性，我们尽量多写无状态组件，少写有状态组件。降低维护成本，增加复用性。</p>',9),i=[c];function l(d,r,_,n,p,u){return t(),o("div",null,i)}const b=e(a,[["render",l]]);export{m as __pageData,b as default};
